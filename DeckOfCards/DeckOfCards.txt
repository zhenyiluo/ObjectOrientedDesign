/*
 * Design the data structure for a set of cards. Explain how you would subclass the data structure to implement blackjack.
 */

 Classes: Card, Deck, Hand

 public Enum Suit{
 	DIAMOND(0), HEART(1), CLUB(2), SPADE(3);
 	int value;
 	public Suit(int aInvalue){
 		value = aInValue;
 	}
 	public int getValue(){
 		return value;
 	}
 	public Suit getSuitFromValue(int aInValue){
 		// TODO
 	}
 }

 public abstract class Card{
 	protected Suit suit;
 	protected int faceValue;

 	public boolean available = true;
 	public Card(int c, Suit s){
 		faceValue = c;
 		suit = s;
 	}

 	public abstract int value();
 	public Suit suit() {
 		return suit;
 	}
 	public boolean isAvailable(){
 		return available
 	}
 	public void markUnavailable(){
 		available = false;
 	}
 	public void markAvailable(){
 		available = true;
 	}
 }

 public class Deck <T extends Card>{
 	private ArrayList<T> cards;
 	private int dealtIndex = 0;
 	public void setDeckOfCards(ArrayList<T> deckOfCards){
 		cards = deckOfCards;
 	}
 	public void shuffle(){
		// TODO
 	}
 	public T dealCard(){
		// TODO
 	}
	public int remainingCards(){
		return cards.size() - dealtIndex;
	}
	public T[] dealHand(int number){
		// TODO
	}
 }

/*
 * A subset of cards hold by a player.	
 */
public class Hand <T extends Card>{
	public ArrayList<T> cards = new ArrayList<T>();
	public int getScore(){
		int socres = 0;
		for(Card card : cards){
			scores += card.value();
		}
		return scores;
	}
	public void addCard(T card){
		cards.add(card);
	}
}

public class BlackJackHand extends Hand{
	public int score(){
		ArrayList<Integer> scores = possibleScores();
		int maxUnder = Integer.MIN_VALUE;
		int minOver = Integer.MAC_VALUE:
		for(int score : scores){
			if(score > 21 && score < minOver){
				minOver = score;
			}else if(score <= 21 && score > maxUnder){
				maxUnder = score;
			}
		}
		return maxUnder == Integer.MIN_VALUE ? minOVer : maxUnder;
	}

	private ArrayList<Integer> possibleScore(){
		// TODO evaluate each ACE as both 1 and 11.
	}

	public boolean busted(){
		return socre() > 21;
	}
	public boolean is21(){
		return score() == 21;
	}

}

public class BlackJackCard extends Card{
	public BlackJackCard(int c, Suit s){
		super(c, s);
	}

	public int value(){
		if(isAce()){
			return 1;
		}else if(isFaceCard()){
			return 10;
		}else{
			return faceValue;
		}
	}
	public int minValue(){
		if(isAce()){
			return 1;
		}else{
			return value();
		}
	}
	public int maxValue(){
		if(isAce()){
			return 11;
		}else{
			return value();
		}
	}
	public boolean isAce(){
		return faceValue == 1;
	}
	public boolean isFaceCard(){
		return faceValue >=11 && faceValue <= 13;
	}
} 





